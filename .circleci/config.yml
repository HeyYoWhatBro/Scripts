version: 2.1
jobs:
  build:
    machine:
      image: ubuntu-2204:current
    resource_class: large
 
    steps:
      - run:
          name: Setup
          command: |
            sudo DEBIAN_FRONTEND=noninteractive apt-get update -yqq
            sudo ln -s /usr/bin/python2.7 /usr/bin/python
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y bc python3 bison build-essential curl ccache coreutils flex g++-multilib gcc-multilib git gnupg \
            gperf libxml2 lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libwxgtk3.0-gtk3-dev imagemagick lunzip lzop schedtool squashfs-tools xsltproc zip \
            zlib1g-dev perl xmlstarlet virtualenv xz-utils rr jq libncurses5 pngcrush lib32ncurses5-dev git-lfs libxml2 openjdk-11-jdk wget lib32readline-dev \
            libssl-dev libxml2-utils android-sdk-libsparse-utils lld zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \
            lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig ca-certificates bc cpio imagemagick \
            bsdmainutils lz4 aria2 rclone ssh-client libncurses5 libssl-dev rsync schedtool python-is-python3
            sudo curl https://storage.googleapis.com/git-repo-downloads/repo > ./repo && sudo mv ./repo /usr/local/bin/repo && sudo chmod a+x /usr/local/bin/repo
            git config --global user.name "test"
            git config --global user.email "testest19824981294@gmail.com"

      - run:
          name: Setup ccache
          command: |
            cd $CIRCLE_WORKING_DIRECTORY
            mkdir ccache
            sudo mkdir /mnt/ccache
            sudo mount --bind ./ccache /mnt/ccache
            echo 'export USE_CCACHE=1' >> $BASH_ENV
            echo 'export CCACHE_DIR=/mnt/ccache' >> $BASH_ENV
            echo 'export CCACHE_EXEC=$(which ccache)' >> $BASH_ENV
            source $BASH_ENV
            ccache -o compression=true
            ccache -M 20G
            ccache -z

      - run:
          name: Build
          command: |
            cd $CIRCLE_WORKING_DIRECTORY
            git clone https://github.com/MrErenK/android_kernel_xiaomi_mt6785 -b rebase --depth=500 astera
            cd astera
            git clone https://github.com/MrErenK/Scripts/
            mv Scripts/.circleci/kranul-build.sh .
            sudo rm -r Scripts
            chmod +x ./kranul-build.sh
            ./kranul-build.sh

      - run:
          name: Upload
          command: |
            cd $CIRCLE_WORKING_DIRECTORY/astera
            curl -sL https://git.io/file-transfer | sh
            ./transfer wet builds/*.zip
